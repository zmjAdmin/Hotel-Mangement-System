##定义初始变量
#set($tableName = $tool.append($tableInfo.name, "ServiceImpl"))
#set($pageEntityPackage = $tool.append($!{tableInfo.savePackageName}, ".common.utils.web"))
#set($pageNumName = "page")
#set($pageSizeName = "pageSize")
#set($pageEntity = "PageEntity")
##设置回调
$!callback.setFileName($tool.append($tableName, ".java"))
$!callback.setSavePath($tool.append($tableInfo.savePath, "/service/impl"))

##拿到主键
#if(!$tableInfo.pkColumn.isEmpty())
    #set($pk = $tableInfo.pkColumn.get(0))
#end
#set($IdArr = $tool.append($!pk.shortType, "[]"))
#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;

import $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};
import $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;
import $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import $!{pageEntityPackage}.PageEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

/**
 * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类
 *
 * @author $!author
 * @since $!time.currTime()
 */
@Service
public class $!{tableName} implements $!{tableInfo.name}Service {

@Autowired
private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;

/**
 * 分页查询
 *
 * @param $!{tool.firstLowerCase($tableInfo.name)} 筛选条件
 * @param $pageNumName 当前页
 * @param $pageSizeName 每页的条数
 * @return 查询结果
 */
@Override
public $pageEntity<$!{tableInfo.name}> queryByPage($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}), Integer $pageNumName, Integer $pageSizeName) {
        PageHelper.startPage($pageNumName, $pageSizeName);
        PageInfo<$!{tableInfo.name}> pageInfo = new PageInfo<>(this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryAll($!{tool.firstLowerCase($tableInfo.name)}));
        return new PageEntity<$!{tableInfo.name}>(pageInfo.getList(), (long)pageInfo.getPageNum(), pageInfo.getTotal());
        }

/**
 * 通过主键查询单条数据
 *
 * @param id 主键
 * @return 单条数据
 */
@Override
public $!{tableInfo.name} queryById($!pk.shortType id) {
        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryById(id);
        }

/**
 * 插入一条数据
 *
 * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象
 * @return 受影响行数
 */
@Override
public Integer insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {
        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));
        }

/**
 * 批量插入数据
 *
 * @param $!tool.firstLowerCase($!{tableInfo.name})List 实体列表
 * @return 受影响行数
 */
@Override
public Integer batchInsert(List<$!{tableInfo.name}> $!tool.firstLowerCase($!{tableInfo.name})List){
    int num = 0;
    for($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}) : $!tool.firstLowerCase($!{tableInfo.name})List){
        num += this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));
        }
    return num;
        }

/**
 * 通过主键修改数据
 *
 * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象
 * @return 受影响行数
 */
@Override
public Integer update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {
        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name}));
        }

/**
 * 通过主键删除数据
 *
 * @param id 主键
 * @return 受影响行数
 */
@Override
public Integer deleteById($!pk.shortType id) {
        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById(id);
        }

/**
* 通过主键批量删除数据
*
* @param ids 主键数组
* @return 受影响行数
*/
@Override
public Integer batchDelete($!IdArr ids){
        int num = 0;
        for($!pk.shortType id : ids){
            num += this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById(id);
        }
        return num;
        }

        }